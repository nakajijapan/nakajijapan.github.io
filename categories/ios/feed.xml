<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Ios on おじさんは生きている</title>
        <link>http://nakajijapan.github.io/categories/ios/</link>
        <description>Recent content in Ios on おじさんは生きている</description>
        <generator>Hugo -- gohugo.io</generator>
        
        <language>ja-JP</language>
        
        <copyright>nakajijapan All rights reserved.</copyright>
        
        <lastBuildDate>Sun, 08 Sep 2019 22:10:01 +0900</lastBuildDate>
        
        
        
        <atom:link href="http://nakajijapan.github.io/categories/ios/" rel="self" type="application/rss+xml" />
        
        
        <item>
            <title>iOSDC JAPAN 2019で「サービスにおけるデザインシステムの構築」について話してきた</title>
            <link>http://nakajijapan.github.io/posts/2019/2019-09-08-iosdcjapan2019/</link>
            <pubDate>Sun, 08 Sep 2019 22:10:01 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2019/2019-09-08-iosdcjapan2019/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2019/09_002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;２０１９年０９月０５、０６、０７日と開催されたカンファレンス &lt;a href=&#34;https://iosdc.jp/2019/&#34;&gt;iOSDC JAPAN 2019&lt;/a&gt; に参加してきました。
今年は引き続きコアスタッフとして関わりつつ発表者として登壇してきました。今年は子育てしつつではあったので準備等は控えめにさせつつ発表の方をガンバる感じで進めてきました。
発表自体は満員御礼という状態で他のトラックでもみる状況になっていたのは嬉しい限りでした。&lt;/p&gt;
&lt;h1 id=&#34;子育てとコアスタッフと登壇&#34;&gt;子育てとコアスタッフと登壇&lt;/h1&gt;
&lt;p&gt;子供ができて初めてのカンファレンスの登壇準備だったりスタッフ運営だったり、登壇準備だったりと想像を超えたタスク量になり全てフルコミットできたかとういうと
そうではなく、何かをおろそかになったりするところがあり妻やスタッフのメンバには迷惑をかけるところがあったかと思います。スタッフの皆さんは面目無いと同時に
みんなの神対応でなんとか切り抜けることができました。そして妻にはカンファレンスの準備と言って集中してくれる時間を設けて子供と外出してくれたり、カンファレンスの日は
三日間フルコミットしてもらうことになり大変助かりました。&lt;/p&gt;
&lt;h1 id=&#34;登壇&#34;&gt;登壇&lt;/h1&gt;
&lt;p&gt;前回は全然デザインの話とかではなくて僕の趣味のMarkdownの解析の話で話題は１８０度別の話です。
今回発表したのが「サービスにおけるデザインシステムの構築」です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;モバイル開発をしている上でデザインとの関係性は切手は切れない関係だとお思います。
また、プロダクト自体も成長に伴い複雑性がましてきました。そのときに私はデザインシステム
に注目して様々なアプローチしてきました。&lt;/p&gt;
&lt;p&gt;本発表ではあまり馴染みではなoい「デザインシステム」はどういうものなのかという基本的な話から
ではどのようにしてプロダクトにデザインシステムを導入し、どこまで何をしていったのか
エンジニアリングを持って何を解決していったのかを解説します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;資料&#34;&gt;資料&lt;/h1&gt;
&lt;p&gt;資料は以下になります。&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;4d7b8a4a206c486db4891bd557caa5bc&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;言いたかったこと&#34;&gt;言いたかったこと&lt;/h1&gt;
&lt;p&gt;僕が言いたかったことは別にWEBページでスタイルガイドとかパターンライブラリをどうやって便利にすることよりもまずは自分たちチームが作成しているプロダクトに対して
どれだけみんな（エンジニア・デザイナ・ビジネス）が同じ思想でデザインしているかだと思います。そのために必要なものは言語化していこうという話です。
それが確立した上でのそれぞれの要素を運用して行くかだと思います。さらにはエンジニアとしてこのシステムにどう関わって行くかもです。&lt;/p&gt;
&lt;h1 id=&#34;補足&#34;&gt;補足&lt;/h1&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/iosdc?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#iosdc&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/d?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#d&lt;/a&gt; 視聴・配信画面はそもそも使ってる要素が違うし、それをちゃんと抽象化仕切れていないから難しいんだよなぁ。要素への落とし込み自体は分離できそう。&lt;/p&gt;&amp;mdash; The old man (@nakajijapan) &lt;a href=&#34;https://twitter.com/nakajijapan/status/1169894028617273347?ref_src=twsrc%5Etfw&#34;&gt;September 6, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;機能で原則を分けるのは良くないというツイートを見かけて反応しました。分けて決めること自体は間違ってないと思うけども表現の仕方が悪かったかなと思ってる。
そもそも視聴配信とそれ以外では利用しているUI要素が全く違うし目的が違うので考え方は変えても良さそうとは考えてる。
なので表現を変えるとしたら以下になるのかなとお思ってる。&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;76&#34; data-id=&#34;4d7b8a4a206c486db4891bd557caa5bc&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;というよりは&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;78&#34; data-id=&#34;4d7b8a4a206c486db4891bd557caa5bc&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;ユーザにはとことん楽しんでもらう&lt;/li&gt;
&lt;li&gt;誠実なところは誠実に
（暫定）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こうしたときに今回要素ごとに落とし込みを行なったのは後者の方を基にしたものが多かったと思います。&lt;/p&gt;
&lt;h1 id=&#34;最後に&#34;&gt;最後に&lt;/h1&gt;
&lt;p&gt;反省点としてはもっとみんなと対話したかった。発表が終わりAsk the speakerの時間を設けてい田はずなのにLTの司会を入れたのが故にそこをなくしてしまったことです。
ダメ出し欲しかったし褒めて欲しかったしもっと色々話したかったです。&lt;/p&gt;
&lt;p&gt;でも、なんだかんだで楽しかったなぁ。&lt;/p&gt;
&lt;div style=&#34;width: 400px;&#34;&gt;
![](/images/posts/2019/09_001.jpg)
&lt;/div&gt;</description>
        </item>
        
        <item>
            <title>VIPER設計(&#43;RxSwift)でサービスのコードを置き換えた</title>
            <link>http://nakajijapan.github.io/posts/2018/2018-12-17-viper-rxswift/</link>
            <pubDate>Mon, 17 Dec 2018 00:00:00 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2018/2018-12-17-viper-rxswift/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2018/ios2&#34;&gt;iOS (その2) Advent Calendar 2018&lt;/a&gt; 17日目です！&lt;/p&gt;
&lt;p&gt;本記事はプロダクトのコードをRxSwiftをうまく活用しながらVIPERの設計に置き換えていった話です。&lt;/p&gt;
&lt;h1 id=&#34;なぜ置き換えたのか&#34;&gt;なぜ置き換えたのか&lt;/h1&gt;
&lt;p&gt;現在、&lt;a href=&#34;http://polca.jp/&#34;&gt;Polca&lt;/a&gt;をリリースをして一年が立ちました。開発をし始めて二年は経過しました。
自分はリリースして半年が経過しているときに入社したのですが、当初もある程度機能はある状態で、コード量も1万に突破していく頃でした。
自分は開発していく上で下記の問題を抱くようになりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;責務がいたるところに分散している&lt;/li&gt;
&lt;li&gt;コード量がある程度多くなってきた&lt;/li&gt;
&lt;li&gt;テストが書きにくい&lt;/li&gt;
&lt;li&gt;RxSwiftが既に導入されているのでもっと活用したい。そして、ちゃんと使いたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そこで、今後開発をしていく上である程度運用しやすい状態にしたい、変えるタイミングとしては今がやりやすいと考え、VIPERの導入に踏み切りました。&lt;/p&gt;
&lt;h2 id=&#34;viperとは&#34;&gt;VIPERとは&lt;/h2&gt;
&lt;p&gt;そもそもVIPERとはどんなものでしょうか簡単におさらいしていきます。
VIPERはiOSにおけるクリーンアーキテクチャの手法の一つとなり、責務を大きく５つに分けています。
ざっくりまとめると以下の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View
&lt;ul&gt;
&lt;li&gt;プレゼンターによって何かを伝える&lt;/li&gt;
&lt;li&gt;プレゼンターにユーザの入力を受け取る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactor
&lt;ul&gt;
&lt;li&gt;ユースケースによって必要なビジネスロジックが含まれている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Presenter
&lt;ul&gt;
&lt;li&gt;インタラクタから受け取った、ユーザの入力により受け取った情報を準備するためのロジック&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Entity
&lt;ul&gt;
&lt;li&gt;インタラクたによって利用された基本的なモデルオブジェクトが含まれている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Routing
&lt;ul&gt;
&lt;li&gt;画面がどの順番で表示されるのかをナビゲーションロジックが含まれている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2018/2018-12-001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.objc.io/issues/13-architecture/viper/&#34;&gt;https://www.objc.io/issues/13-architecture/viper/&lt;/a&gt;
詳細はこちらを参照してください&lt;/p&gt;
&lt;h1 id=&#34;どのようにしていったか&#34;&gt;どのようにしていったか&lt;/h1&gt;
&lt;p&gt;polcaではVIPERを意識した設計を導入していますが、全てを適用したわけではありません。
Routingの部分はまだ適用していません。それは、今のフェーズで費用対効果あまり感じないように思ったことが一つと
必要に迫られたとしてこれは、後からでもリファクタリングが可能だと思ったからです。&lt;/p&gt;
&lt;h2 id=&#34;実装編&#34;&gt;実装編&lt;/h2&gt;
&lt;p&gt;ではどのように実装していったか。
まず、Presenterを軸にインターフェースなる部分を作成していきました。ここでは、それぞれの役割が何を伝えて、何を受け取るのかを定義していきます。
Presenterから作成しその引数をprotocolにしていくことでViewControllerの実装をすることなしにビルドであったりテストが可能になるので
まずはここから始めています。その後、Presenterを実装しつつ、Interactor、Viewと実装していっています。
別レイヤーのやりとりでは、基本的にはRxSwiftを利用しています。単純なイベントの送受信だったら&lt;code&gt;Driver&amp;lt;Void&amp;gt;&lt;/code&gt;であったり
情報の取得時には&lt;code&gt;Single&amp;lt;PaginationResponse&amp;lt;ProjectPickup.Project&amp;gt;&amp;gt;&lt;/code&gt;を利用し、状況に応じて型を変更して流れを変化させています。&lt;/p&gt;
&lt;h3 id=&#34;presenter&#34;&gt;Presenter&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;protocol WatchedProjectListViewProtocol {
    var scrollViewReachedBottom: Driver&amp;lt;Void&amp;gt; { get }
    var refreshTrigger: Driver&amp;lt;Void&amp;gt; { get }
}

protocol WatchedProjectListInteractorProtocol {
    func getWatchedProjects(maxID: Int64) -&amp;gt; Single&amp;lt;PaginationResponse&amp;lt;ProjectPickup.Project&amp;gt;&amp;gt;
}

class WatchedProjectListPresenter: ProjectListPreseterBase {
    init(view: WatchedProjectListViewProtocol, interactor: WatchedProjectListInteractorProtocol) {
        // something
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一覧を表示する時の情報受け渡しは以下のように実装しています。&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>iOSDC 2018 でMarkdownの解析について発表してきた。</title>
            <link>http://nakajijapan.github.io/posts/2018/2018-09-07-iosdc-markdown/</link>
            <pubDate>Mon, 10 Sep 2018 00:46:52 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2018/2018-09-07-iosdc-markdown/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2018/2018-09-002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;発表したぞ！&lt;/p&gt;
&lt;p&gt;iOSDC 2018にコアスタッフ兼スピーカーとして参加させていただきました。
発表時間帯は初日でしかも朝一で発表しなければいけなく、人がくるのかと
心配していましたが、朝一にもかかわらずまぁまぁ人がきてくれたので少し安心しました。&lt;/p&gt;
&lt;p&gt;発表のタイトルはこちら&lt;/p&gt;
&lt;h2 id=&#34;markdownをリアルタイムに解析する&#34;&gt;Markdownをリアルタイムに解析する&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://fortee.jp/iosdc-japan-2018/proposal/a2e20820-d4f6-43e5-b34b-1b9e6fec7806&#34;&gt;https://fortee.jp/iosdc-japan-2018/proposal/a2e20820-d4f6-43e5-b34b-1b9e6fec7806&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdownを解析する時にGitHubで探せば簡単にライブラリを何個も見つけることができます。しかし、をそれをリアルタイムとなるとなかなかみつけることができません。私は端末間で同期できるメモアプリを作成し、機能の一つに入力しながらMarkdown形式に色付けをする機能を実装しました。本トークではリアルタイムに文章を解析し、リッチな表現をどのようにして行っているのかを解説します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;資料&#34;&gt;資料&lt;/h1&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;e973277a6f24458da5cbd4fdbf829941&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;ざっくり解説&lt;/p&gt;
&lt;h1 id=&#34;リアルタイムに処理をするために&#34;&gt;リアルタイムに処理をするために&lt;/h1&gt;
&lt;p&gt;以下の項目を基点に話を掘り下げていきました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カラーリング&lt;/li&gt;
&lt;li&gt;入力補佐&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;カラーリング&#34;&gt;カラーリング&lt;/h1&gt;
&lt;p&gt;一番リアルタイム性を考えなければいけないのが文字を入力した時です。&lt;/p&gt;
&lt;h2 id=&#34;最小限の範囲で文字列操作を行う&#34;&gt;最小限の範囲で文字列操作を行う&lt;/h2&gt;
&lt;h3 id=&#34;いつ&#34;&gt;いつ？&lt;/h3&gt;
&lt;p&gt;まず、、&lt;code&gt;NSTextStorageDelegate&lt;/code&gt;のメソッド（以下のメソッド）を使用して取得する必要がありました。
これは処理前にこのメソッドがコールされ、その中でで編集した領域を取得するができます。
さらに&lt;code&gt;editedRange&lt;/code&gt;は複数行の場合があることを考慮に入れる必要があります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// MARK: - NSTextStorageDelegate

extension TextViewController: NSTextStorageDelegate {
    func textStorage(_ textStorage: NSTextStorage, willProcessEditing editedMask: NSTextStorageEditActions, range editedRange: NSRange, changeInLength delta: Int) {
        self.editedRange = editedRange
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;何を&#34;&gt;何を？&lt;/h3&gt;
&lt;p&gt;それは&lt;code&gt;変換するべき領域&lt;/code&gt;です。以前のコードで&lt;code&gt;editedRange&lt;/code&gt;を利用していますが、これは編集した領域であって変換する領域ではありません。以下のように、編集した時にそれに関わる行の最初の位置から最後の位置まで取得する必要があります。&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;41&#34; data-id=&#34;e973277a6f24458da5cbd4fdbf829941&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;43&#34; data-id=&#34;e973277a6f24458da5cbd4fdbf829941&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;この赤線の部分が一行ずつ抽出して属性を変更していきます。&lt;/p&gt;
&lt;h3 id=&#34;どのようにして&#34;&gt;どのようにして？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;変換するべき領域&lt;/code&gt;を抽出するんですがその時には以下の関数を使うと&lt;code&gt;行の全ての範囲を取得する&lt;/code&gt;ことが可能になります。
ここでは取得した行の範囲にあるlocationがわかっていれば期待した位置が取得できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lineRange&lt;/li&gt;
&lt;/ul&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;50&#34; data-id=&#34;e973277a6f24458da5cbd4fdbf829941&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;　&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>iOSDC Japan 2018で発表します 💪</title>
            <link>http://nakajijapan.github.io/posts/2018/2018-08-25-iosdc-izumo/</link>
            <pubDate>Sat, 25 Aug 2018 17:42:50 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2018/2018-08-25-iosdc-izumo/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2018/2018-08-002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;iOSDC2018 で話すことになりました。
今回、出したのは以下の三つでしたが幸運にも一つ採択されました。よかった。。。
採択されたのは&lt;code&gt;Markdownをリアルタイムに解析する&lt;/code&gt;でIzumoというMarkdown専用のメモアプリを作成するときに
色々考えることがあったのでそのことについて赤裸々に話せればと思います！&lt;/p&gt;
&lt;p&gt;あと、他の二つも結構ガンバ行っているところなのでどこかしらでアウトプットできればと思っています。&lt;/p&gt;
&lt;p&gt;カンファレンスはスタッフとしてほぼいると思いますので、ぜひお声がけしていただければと思います！
&lt;strong&gt;友達になってください！&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;採択&#34;&gt;採択&lt;/h1&gt;
&lt;h2 id=&#34;markdownをリアルタイムに解析する&#34;&gt;Markdownをリアルタイムに解析する&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://fortee.jp/iosdc-japan-2018/proposal/a2e20820-d4f6-43e5-b34b-1b9e6fec7806&#34;&gt;https://fortee.jp/iosdc-japan-2018/proposal/a2e20820-d4f6-43e5-b34b-1b9e6fec7806&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdownを解析する時にGitHubで探せば簡単にライブラリを何個も見つけることができます。しかし、をそれをリアルタイムとなるとなかなかみつけることができません。私は端末間で同期できるメモアプリを作成し、機能の一つに入力しながらMarkdown形式に色付けをする機能を実装しました。本トークではリアルタイムに文章を解析し、リッチな表現をどのようにして行っているのかを解説します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;不採択&#34;&gt;不採択&lt;/h1&gt;
&lt;h2 id=&#34;リリース間もないサービスにviperrxswiftを導入した話&#34;&gt;リリース間もないサービスにVIPER+RxSwiftを導入した話&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;iOSを開発をする上で一度はどんな設計でアプリを開発していったらいいのか考えるかと思います。
私たちはアプリを開発を始めてもうすぐ一年が経とうとするアプリに対してVIPER+RxSwiftを取り入れました。
このトークでは、なぜ、どのようにどこまでしてそれを導入したのか、実際にどうなったか、さらには実際の画面に応じた実装がどうなっているのかを実際のコードを交えながら説明できればと思います。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;マルチデバイス対応同期可能なメモアプリを開発した話&#34;&gt;マルチデバイス対応＋同期可能なメモアプリを開発した話。&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;みなさんは業務でも個人でもで、iPhone,iPad,macOS等のマルチデバイスに対応し、同期を行うということはなかなか無いと思います。
私は個人で実際にそれに対応したメモアプリをリリースしました。その中でデバイス間の同期をどのようにして行われているのか。
実際にマルチデバイス(iPhone,iPad,macOS)を対応するにおいて何を考慮しないといけないのかをお話しできればと思います。&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        
        <item>
            <title>Springアニメーションのテスト</title>
            <link>http://nakajijapan.github.io/posts/2018/2018-07-28-springtest/</link>
            <pubDate>Sat, 28 Jul 2018 01:08:11 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2018/2018-07-28-springtest/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2018/2018-08-001.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h1&gt;
&lt;p&gt;macOSでNSIndicatorViewを利用し用としたところ、なぜか背景が透過せずに若干グレイになってしまっていてそれが仕様のようなので自分で作ることにした。
どうせ作るんだったら少し捻ったものにしようと思い、試行錯誤している。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nakajijapan/CASpringAnimationTest&#34;&gt;https://github.com/nakajijapan/CASpringAnimationTest&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;caspringanimation&#34;&gt;CASpringAnimation&lt;/h2&gt;
&lt;p&gt;Springアニメーションの制御がlayerに対して行えるようになります。
このパラメータをうまく設定することで期待しているアニメーションが実現できるようになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mass
&lt;ul&gt;
&lt;li&gt;質量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;initialVelocity
&lt;ul&gt;
&lt;li&gt;初速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;damping
&lt;ul&gt;
&lt;li&gt;振動の減衰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stiffness
&lt;ul&gt;
&lt;li&gt;ばねの弾性力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;これは実際の大きさになるためのアニメーションにスプリングを加えたものになります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let animation = CASpringAnimation(keyPath: &amp;#34;transform.scale&amp;#34;)
animation.mass = CGFloat(mass.value)
animation.damping = CGFloat(damping.value)
animation.stiffness = CGFloat(stiffness.value)

animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
animation.fromValue = 0.6
animation.toValue = 1.0

animation.isRemovedOnCompletion = true
animation.fillMode = kCAFillModeForwards
animation.duration = CFTimeInterval(duration.value)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/quartzcore/caspringanimation&#34;&gt;https://developer.apple.com/documentation/quartzcore/caspringanimation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MengTo/Spring&#34;&gt;https://github.com/MengTo/Spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>Izumo 1.4.0にアップデートしました。</title>
            <link>http://nakajijapan.github.io/posts/2018/2018-07-26-izumo-1-4/</link>
            <pubDate>Thu, 26 Jul 2018 00:47:43 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2018/2018-07-26-izumo-1-4/</guid>
            <description>&lt;p&gt;Izumo - Markdown Note tool -のアップデートをしました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://izumo.nakajijapan.net/images/icon.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/izumo/id1281895938?mt=12&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/izumo/id1281897347?mt=8&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;macos&#34;&gt;macOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インジケータを表示するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ios&#34;&gt;iOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インジケータを表示するようにした。&lt;/li&gt;
&lt;li&gt;カテゴリ一覧に件数を表示するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;思い&#34;&gt;思い&lt;/h2&gt;
&lt;p&gt;インジケータは、本当はユーザに知らせる必要はないものと一見思えるものだが、アプリとの機能として同期ができるものとなっている。
普通に操作していると何もしていないかのような状態になっているので、ユーザに他のデバイスと&lt;strong&gt;ちゃんと&lt;/strong&gt;同期をしていますよという安心感を
無意識に認知させるためにある。もちろん目立ってはいけないので操作の邪魔にならないようにさりげないところに小さく置いてある。&lt;/p&gt;
&lt;p&gt;カテゴリ一覧は、あまりに情報が少なく、自分が保存した量がしっかり保存されているのかと確認と安心感を与えるために実装した。&lt;/p&gt;
&lt;h1 id=&#34;子供用です&#34;&gt;子供用です&lt;/h1&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&#34;//suzuri.jp/thirdparty/widgets.js&#34;;js.charset=&#34;utf-8&#34;;fjs.parentNode.insertBefore(js,fjs);}}(document,&#34;script&#34;,&#34;suzuri-widget-script&#34;);&lt;/script&gt;
&lt;div class=&#34;suzuri-widget-product&#34; data-suzuri-product-id=&#34;2546056&#34; data-suzuri-item-variant-id=&#34;278&#34;&gt;&lt;a href=&#34;https://suzuri.jp/nakajijapan/1207469/baby-rompers/70/white&#34;&gt;&lt;img src=&#34;https://d1q9av5b648rmv.cloudfront.net/v3/323x323/baby-rompers/70/white/1207469/1531241609-708x870.png.1.35747+0.08531+0.0.jpg?h=1b1f97cde85f02b2cbcd460da980732658885ff2&#34; width=&#34;323&#34; height=&#34;323&#34;&gt;&lt;/a&gt;&lt;/div&gt;</description>
        </item>
        
        <item>
            <title>アップデートをユーザにお知らせするライブラリ作成した。（iOS用）</title>
            <link>http://nakajijapan.github.io/posts/2018/2018-07-12-versionupdater/</link>
            <pubDate>Thu, 12 Jul 2018 00:54:13 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2018/2018-07-12-versionupdater/</guid>
            <description>&lt;p&gt;何かと必要なのでシンプルなものをSwiftで作成し直した。
以前は、Objective-C用のライブラリを使っていてPRとかもしていた。
だけど、Swiftのものが欲しくなったので作成した。&lt;/p&gt;
&lt;h1 id=&#34;versionupdater&#34;&gt;VersionUpdater&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Notify users when a new version of your app is available and force them to upgrade the application of the version.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nakajijapan/VersionUpdater&#34;&gt;https://github.com/nakajijapan/VersionUpdater&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS 10.0+&lt;/li&gt;
&lt;li&gt;Xcode 9+&lt;/li&gt;
&lt;li&gt;Swift 4+&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;仕様&#34;&gt;仕様&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アプリがアクティブになったらサーバからJSONファイルを取得する&lt;/li&gt;
&lt;li&gt;バージョンを比較して低ければアラートを表示する&lt;/li&gt;
&lt;li&gt;モード
&lt;ul&gt;
&lt;li&gt;強制
&lt;ul&gt;
&lt;li&gt;ダイアログを閉じれなくし、指定のURLへの遷移を強制させる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;オプショナル
&lt;ul&gt;
&lt;li&gt;ダイアログを閉じることができ、以降アプリの操作ができる&lt;/li&gt;
&lt;li&gt;サイドアプリがアクティブになればまたダイアログが表示される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;endpointを指定してあげるだけです。あとは内部でチェックを行い、モードに応じてダイアログを表示します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    func applicationDidBecomeActive(_ application: UIApplication) {
        let versionUpdater = VersionUpdater(
            endPointURL: URL(string: &amp;#34;https://foo.com/ios.json&amp;#34;)!
        )
        versionUpdater.executeVersionCheck()
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;android&#34;&gt;Android&lt;/h1&gt;
&lt;p&gt;Android用は&lt;a href=&#34;https://github.com/misyobun/MSBVersionUpdater&#34;&gt;MSBVersionUpdater&lt;/a&gt;があります。
最近 @misyobun さんがKotlinで書き直したらしいのでjavaをプロジェクトに入れたくない方おすすめです。&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Izumo 1.3.1にアップデートしました。</title>
            <link>http://nakajijapan.github.io/posts/2018/2018-07-11-izumo-1-3/</link>
            <pubDate>Wed, 11 Jul 2018 00:44:06 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2018/2018-07-11-izumo-1-3/</guid>
            <description>&lt;p&gt;Izumo - Markdown Note tool -のアップデートをしました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://izumo.nakajijapan.net/images/icon.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/izumo/id1281895938?mt=12&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/jp/app/izumo/id1281897347?mt=8&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;macos&#34;&gt;macOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;編集中のノートを同期しようとした時にカーソルが先頭に移動してしまう&lt;/li&gt;
&lt;li&gt;ローカライズ対応
&lt;ul&gt;
&lt;li&gt;中国語を対応した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ios&#34;&gt;iOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;カテゴリ選択のインタラクションとUIの改善
&lt;ul&gt;
&lt;li&gt;角丸対応&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nakajijapan/Shari/pull/32&#34;&gt;https://github.com/nakajijapan/Shari/pull/32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cellのスワイプ後、タップした時のインタラクションの改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ローカライズは中国でダウンロードされて欲しいという希望的観測です。。。&lt;/p&gt;
&lt;h1 id=&#34;tシャツ作った&#34;&gt;Tシャツ作った&lt;/h1&gt;
&lt;p&gt;テンション上がって作ってみました。
あまり派手にせずシンプルにしてカジュアルに着れるようにしています。うん、僕が着ます。&lt;/p&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&#34;//suzuri.jp/thirdparty/widgets.js&#34;;js.charset=&#34;utf-8&#34;;fjs.parentNode.insertBefore(js,fjs);}}(document,&#34;script&#34;,&#34;suzuri-widget-script&#34;);&lt;/script&gt;
&lt;div class=&#34;suzuri-widget-product&#34; data-suzuri-product-id=&#34;2545901&#34; data-suzuri-item-variant-id=&#34;21&#34;&gt;&lt;a href=&#34;https://suzuri.jp/nakajijapan/1207469/t-shirt/m/white&#34;&gt;&lt;img src=&#34;https://d1q9av5b648rmv.cloudfront.net/v3/323x323/t-shirt/m/white/1207469/1531241609-708x870.png.0.72812+0.40823+0.0.jpg?h=2643e959c64f978b5e046d37fb082b947cb3839f&#34; width=&#34;323&#34; height=&#34;323&#34;&gt;&lt;/a&gt;&lt;/div&gt;</description>
        </item>
        
        <item>
            <title>iOSDC2016で発表してきた。</title>
            <link>http://nakajijapan.github.io/posts/2016/2016-08-21-iosdc2016/</link>
            <pubDate>Sun, 21 Aug 2016 11:41:00 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2016/2016-08-21-iosdc2016/</guid>
            <description>&lt;center&gt;
&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2016/2016-08-20-05.png&#34; alt=&#34;&#34;&gt;
&lt;/center&gt;
&lt;p&gt;8月20日に開催されたiOSDC2016にコアスタッフ兼スピーカーとして参加して来ました。
内容は「33歳 エンジニア道」です。&lt;/p&gt;
&lt;p&gt;発表の様子&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2016/2016-08-20-01.jpg&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2016/2016-08-20-02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;内容&#34;&gt;内容&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0b04e29b6afe4f81835b94c649f9b4d0&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;今回は一切技術の話はなしで、キャリアのお話です。（他にそういうことを話す人がいなくてゲロ吐きそうなくらいプレッシャーにおわれたのはいうまでもない）
モバイルエンジニアとしてガンガンやって来たけどこの先どうしたいいかと思って色々考えた結果のお話です。
あとこれをきっかけにみんなどうしてるんだろうという話のきっかけにするという目論見もありました。&lt;/p&gt;
&lt;p&gt;考えるときに基本的には以下の三つを考えれば良いことなのかなと思い、自分の人生を振り返りながらどうすればいいのかを考えていきました。
言葉にしたら単純なことだけど深掘りして答えをだすというのがなかなか難しい。ただ、これからのキャリアのことも考えるとかなり重要なこと
だと思ったので振り返った次第であります。&lt;/p&gt;
&lt;h3 id=&#34;中堅として&#34;&gt;中堅として&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;個人としてどうしたいのか&lt;/li&gt;
&lt;li&gt;エンジニアとしてどうありたいか（どうあるべきか）&lt;/li&gt;
&lt;li&gt;会社に何を求められているのか&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;継続していくために&#34;&gt;継続していくために&lt;/h3&gt;
&lt;p&gt;年齢を重ねていくうちにいろんな事がおきてきます。&lt;/p&gt;
&lt;p&gt;それに逃げては何も始まりません、それと向き合って如何に問題を解決していかなければいかないのか考えていかないといけない。
それが以下のことだったりします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;体力
&lt;ul&gt;
&lt;li&gt;健康維持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時間
&lt;ul&gt;
&lt;li&gt;家族と仕事の両立&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;質問&#34;&gt;質問&lt;/h3&gt;
&lt;p&gt;なんだかんだで席がパンパンになったのが嬉しかったと同時に心の中でゲロ吐いてました。（緊張してた。）
質問でうまく答えられなところがあったのでざっくりここで補足しておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;結構何でもやられているがそれでもいいんじゃないでしょうか？
&lt;ul&gt;
&lt;li&gt;色々やって来たがどれもみんな頑張ればできるようなものだと自分では感じている&lt;/li&gt;
&lt;li&gt;なのでこの問題は俺にしかで来ないものを一つ以上持ちたい&lt;/li&gt;
&lt;li&gt;そう、一つ上のステージにいきたいんだ！って感じです。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ライブラリとか会社で創出したものは自分のアカウントで出しても問題ないのか
&lt;ul&gt;
&lt;li&gt;特に大きなルールはない、チームで作り上げたものは会社としてやるべき出し、ほぼ自分で作成したものは自分で出している。ケースバイケース。&lt;/li&gt;
&lt;li&gt;ベジネスに関わるものが入って居なければ問題ない&lt;/li&gt;
&lt;li&gt;ちょっとでも世の中になければ、少しでも便利になるものがあればアウトプットしている&lt;/li&gt;
&lt;li&gt;既存のものにPull requestをして便利にする場合もある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中堅としてどんな事していく
&lt;ul&gt;
&lt;li&gt;正しい技術を正しく利用できるように！&lt;/li&gt;
&lt;li&gt;開発基盤整えてく！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;関連&#34;&gt;関連&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/1014267&#34;&gt;togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;今度は、実際やった事を次のどこかで話せるよう進めていこう。&lt;/p&gt;
&lt;h2 id=&#34;iosdc-2016&#34;&gt;iOSDC 2016&lt;/h2&gt;
&lt;p&gt;Droidkaigiで何回かカンファレンスが開催される中、iOSでもそういうのやりたいなーとモヤモヤ思っている日が続いて居ました。そん時に &lt;a href=&#34;https://twitter.com/tomzoh&#34;&gt;@tomzoh&lt;/a&gt; とpotatotipsで出会い、同じ想いをもっていてすでに会場の予約までしていたのにとても感動してぜひお手伝いをします！というのがきっかけでここまで駆け巡って来ました。そして、当日を迎えられ、無事最後まで完了することができて感無量です。&lt;a href=&#34;https://twitter.com/tomzoh&#34;&gt;@tomzoh&lt;/a&gt; さんには大変感謝！！！！！！！
今回は記念すべき第一回、スタッフとしてスピーカーとしてこのカンファレンスに参加できたことは自分の中でものすごい良い思い出になりました。最高でしかない。
カメラ係として当日は全然トークを聞く状況じゃなかったのであとでじっくり動画を見て一人iOSDCをやろうかと思います。&lt;/p&gt;
&lt;p&gt;また、来年は何らかの形で関わるぞ！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カメラ係やったぞ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2016/2016-08-20-03.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;やっていくぞ記念写真&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2016/2016-08-20-04.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;
&lt;p&gt;練馬のラーメン食べるの忘れた！
あと、写真お借りしました！&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;始まりました！ &lt;a href=&#34;https://twitter.com/hashtag/iosdc?src=hash&#34;&gt;#iosdc&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/b?src=hash&#34;&gt;#b&lt;/a&gt; &lt;a href=&#34;https://t.co/4aNHly8iHY&#34;&gt;pic.twitter.com/4aNHly8iHY&lt;/a&gt;&lt;/p&gt;&amp;mdash; アオヤマ ミント (@MintoAoyama) &lt;a href=&#34;https://twitter.com/MintoAoyama/status/766867833451978752&#34;&gt;2016年8月20日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
        </item>
        
        <item>
            <title>iOSDC2016で話します。</title>
            <link>http://nakajijapan.github.io/posts/2016/2016-07-18-iosdc2016-talk/</link>
            <pubDate>Mon, 18 Jul 2016 01:11:00 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2016/2016-07-18-iosdc2016-talk/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2016/2016-07-18-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;採択されたぞという話です。
今年日本で開催されるデベロッパーカンファレンス、iOSDC2016が開催されることになりました。
運あってか自分はこのカンファレンスで「３３歳モバイルエンジニア道」というタイトルで話をすることになりました。&lt;/p&gt;
&lt;p&gt;日本の皆さんが待望していたカンファレンスだと思っていたので倍率が高くなることを見越して二つほど提出しました。
そのうちの一つがこれです。実はこっちの方がテックなところもあり安心して話せそうだなと思っていました。&lt;/p&gt;
&lt;h3 id=&#34;採択されなかったトーク&#34;&gt;採択されなかったトーク&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://iosdc.jp/2016/c/node/142&#34;&gt;https://iosdc.jp/2016/c/node/142&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最近ではWEB・アプリでもいろんなところで動画に関連するコンテンツが増え、様々なシーンで動画が利用されるようになってきました。とはいえ、アプリで動画の作成したり編集したりしようとすると、設計を理解するのに時間がかかったり、情報がそもそも少なかったりと自分で学ぶ環境としては大変難しい状況であります。
そんな中、本発表ではアプリで動画を編集するところを切り口として、メディアをどのように扱い、どのように編集するのか、つまずいたポイントなど、少しでも皆さんに便利情報をお伝えできればと思います。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;対象者
&lt;ul&gt;
&lt;li&gt;動画編集が興味あるけどよくわからない方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;採択されたトーク&#34;&gt;採択されたトーク&lt;/h3&gt;
&lt;p&gt;そして、今回採択されたのがこれ。
数ある技術トークの中からジャンルとしてはエモいというだいぶレアなカテゴリで話すことになっているので結構緊張していたりします。。
とはいえ、発表する以上みなさんに有用な情報を少しでも届けられたらと思うので、頑張って資料作成しようと思います！！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://iosdc.jp/2016/c/node/65&#34;&gt;https://iosdc.jp/2016/c/node/65&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;時代がWEBからモバイルの時代に突入する中、@nakajijapanは運あってか
モバイルエンジニアとして仕事をいただき、その時代をただひたすらと駆け抜けていく日々でした。いつの間にか歳は今年で３３歳という社会では中堅という立場になってきました。最近では若者がどんどんモバイルエンジニアとして成長していき、
自分の立ち位置が危ぶまれるという恐怖心と戦いながら日々仕事をしています。
本発表では、これまでを振り返り、自分はどうあるべきだったのか・何が良かったのか、モバイルエンジニア・中堅エンジニアとしてこれかどう生き抜いていくのか、皆さまに少しでもお役に立てそうな話をお伝えできればと思います。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;対象者
&lt;ul&gt;
&lt;li&gt;これから中堅エンジニアになっていくけど不安に思っている方&lt;/li&gt;
&lt;li&gt;もう中堅エンジニアの方で今まさにその状況の方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とにもかくにも、前夜祭と当日で面白いトークが満載なので楽しみです！&lt;/p&gt;
&lt;p&gt;ウォーーーーーーー！！！！！&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>potatotips #24に参加してきた</title>
            <link>http://nakajijapan.github.io/posts/2015/2015-12-17-potatotips24/</link>
            <pubDate>Wed, 16 Dec 2015 01:26:00 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2015/2015-12-17-potatotips24/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;http://connpass.com/event/23065/&#34;&gt;potatotips (iOS/Android開発Tips共有会) 第24回&lt;/a&gt;にブログ枠として参加してきたのでそのメモに綴ります！
今回はGoodpatchさん主催での開催となりました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2015/2015-12-16-05.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;iosでテーマ着せ替え機能を実装した時のtips&#34;&gt;iOSでテーマ(着せ替え)機能を実装した時のTips&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;d1c3cc8a35dd4366b573d69ebe926c70&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Goodpatchの重田さん&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UIAppearanceの話&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tvosでwebsocketを使う&#34;&gt;tvOSでWebSocketを使う&lt;/h2&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/aFlPe40wvAwbNT&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/hasegawatomoki/tvoswebsocket&#34; title=&#34;tvOSでWebSocketを使う&#34; target=&#34;_blank&#34;&gt;tvOSでWebSocketを使う&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/hasegawatomoki&#34; target=&#34;_blank&#34;&gt;Tomoki Hasegawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;p&gt;デジタルサーカスの長谷川さん&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apple TVの話&lt;/li&gt;
&lt;li&gt;AppleTVのサーバ通信&lt;/li&gt;
&lt;li&gt;WEB API?
&lt;ul&gt;
&lt;li&gt;もっとリアルタイムにしたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;APNs？&lt;/li&gt;
&lt;li&gt;WebSocket?
&lt;ul&gt;
&lt;li&gt;Starscreamが良かった
&lt;ul&gt;
&lt;li&gt;Pure Swift!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ios7をサポート対象外にして開発を健全化する&#34;&gt;iOS7をサポート対象外にして開発を健全化する&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0bd92e03f3714c389936de4535f104c1&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;@shoby さん&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS 7をサポート対象外にして健全にする&lt;/li&gt;
&lt;li&gt;ユーザにOSのアップデートを促す&lt;/li&gt;
&lt;li&gt;最終互換バージョンを提供する&lt;/li&gt;
&lt;li&gt;著名なアプリが対象外にしている！！！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xcconfigで複数ターゲットのビルド設定をまとめる&#34;&gt;xcconfigで複数ターゲットのビルド設定をまとめる&lt;/h2&gt;
&lt;p&gt;@k_katsumi さん&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;7192f21150ea49bc858305f69640a5f5&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;Univy targets for multiple platforms into one target&lt;/li&gt;
&lt;li&gt;メルカリは言語ごとにターゲット作ってる&lt;/li&gt;
&lt;li&gt;複数管理する方法&lt;/li&gt;
&lt;li&gt;keychainaccess
&lt;ul&gt;
&lt;li&gt;v2.1 コピーすればios7でも使える&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;どうやるか
&lt;ul&gt;
&lt;li&gt;configuration file使ってる
&lt;ul&gt;
&lt;li&gt;base.xcconfig
&lt;ul&gt;
&lt;li&gt;全部デプロイ面とターゲットを利用している&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debug.xcconfig&lt;/li&gt;
&lt;li&gt;Release.xcconfig&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;＊で設定すると便利&lt;/li&gt;
&lt;li&gt;BuildSettingExtractor使うと便利&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;enhancements-with-3d-touch&#34;&gt;Enhancements with 3D Touch&lt;/h2&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/zwXhhkTd8TV58I&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/satsv/enhancements-with-3d-touch&#34; title=&#34;Enhancements with 3D Touch&#34; target=&#34;_blank&#34;&gt;Enhancements with 3D Touch&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/satsv&#34; target=&#34;_blank&#34;&gt;Satoshi Ohki&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;p&gt;Goodpatch の @roothybrid7 さん&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Technology of Etsy</title>
            <link>http://nakajijapan.github.io/posts/2015/2015-12-16-etsy-of-technology/</link>
            <pubDate>Wed, 16 Dec 2015 01:26:00 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2015/2015-12-16-etsy-of-technology/</guid>
            <description>&lt;p&gt;初めまして, &lt;a href=&#34;https://twitter.com/nakajijapan&#34;&gt;@nakajijapan&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/ios&#34;&gt;iOS Adovent Calendar 2015&lt;/a&gt;の16日目の記事になります。&lt;/p&gt;
&lt;p&gt;今日のネタはEtsyの気になるインタラクションがあったので試してみようと思ったのですが、ネットを探してもなかったものなので見よう見まねで作成してみました。
どんなインタラクションかというと作品のの個数を決めるときにドラムロールで選択するのが通常だと思うのですが、Etsyの場合は一工夫しているようで以下のような
インタラクションを実現しています。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2015/2015-12-17-02.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;カートで在庫や作品の色を決めるときに表現されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transitionで現在の画面を多少縮小させる&lt;/li&gt;
&lt;li&gt;画面の半分までTableViewが表示される
&lt;ul&gt;
&lt;li&gt;Cellをタップしたら閉じる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NavigationBarのような部分をパンすることで最後までTableViewが表示されるようになる
&lt;ul&gt;
&lt;li&gt;パンしている間、縮小した画面はそれに合わせてリアルタイムに変化する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは、少ない選択肢の時はTableViewを半分だけ表示すれば事足りるのだが、その半分におさまらない場合はパンすることでさらに見ることができるようになるという仕組み？かと思います。
これがいいのは、ユーザの細かいフェーズでインタラクションを実現できることだと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選択肢が少ない場合は半分だけ表示されれば、画面遷移を完全にすることなく選択できる
&lt;ul&gt;
&lt;li&gt;後ろにタップした画面を表示させることで何のための選択肢なのか視覚的に伝えることができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選択肢が多かったとしても、メジャーに選択されるものを最初の半分で表示させといて、それ以外にも選択する必要がある場合は完全に広げることで選択が可能になる
&lt;ul&gt;
&lt;li&gt;上記と同じなのだが、さらに&lt;strong&gt;本当&lt;/strong&gt;にもっと他の選択肢が必要になった時にのみに全体表示せるようにしている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;試してみたこと&#34;&gt;試してみたこと&lt;/h2&gt;
&lt;p&gt;では、このインタラクションを見てどのように実装してくのかを考えたときに真っ先に思いついたのが&lt;code&gt;UIPercentDrivenInteractiveTransition&lt;/code&gt;を利用した方法です。
これはあるViewControllerからあるViewControllerへ遷移する時のアニメーションを手動で管理する方法です。通常のアニメーションだと最初から最後まで一貫して
行われてしまうのですが&lt;code&gt;UIPercentDrivenInteractiveTransition&lt;/code&gt;を利用することで、例えばパンしている間は、画面を閉じるアニメーションをリアルタイムに制御できるようになるということです。アニメーション自体は&lt;code&gt;UIViewControllerAnimatorTransitioning&lt;/code&gt;プロトコルを利用したアニメーションクラスを実装することで実現できます。
しかし、これだと画面を開くときに最初は通常のアニメーションを行い途中で止めて、途中から&lt;code&gt;UIPercentDrivenInteractiveTransition&lt;/code&gt;を利用してパンしながらリアルタイムにアニメーションをすることができませんでした。&lt;/p&gt;
&lt;h2 id=&#34;どのように作成したの&#34;&gt;どのように作成したの&lt;/h2&gt;
&lt;p&gt;では、どう実現させたかというと遷移前のViewController.viewに遷移先のViewController.viewをaddSubviewすることで実現できました。いたってシンプル。
あとリアルタイムに背景を形状を変化させる処理は以下のようにして実装しました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func transitionBackgroundView(degree: CGFloat, location:CGPoint) {

    let overlayView = self.parentView!.viewWithTag(920)!
    let imageView = overlayView.viewWithTag(910) as! UIImageView
    let scale = self.map(location.y, inMin: 0, inMax: UIScreen.mainScreen().bounds.height, outMin: 0.90, outMax: 1.0)
    let transform : CATransform3D = CATransform3DMakeScale(scale, scale, 1)
    imageView.layer.removeAllAnimations()
    imageView.layer.transform = transform
    imageView.setNeedsLayout()
    imageView.layoutIfNeeded()

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;イベントは&lt;code&gt;UIPanGestureRecognizer&lt;/code&gt;を利用すれば実現できます。&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>「minne」技術戦略カンファレンスに登壇しました。</title>
            <link>http://nakajijapan.github.io/posts/2015/2015-10-22-minne-tech-conference/</link>
            <pubDate>Thu, 22 Oct 2015 01:00:00 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2015/2015-10-22-minne-tech-conference/</guid>
            <description>&lt;p&gt;先日ですが「minne」技術戦略カンファレンスというものがありましてモバイル枠としてお話しさせていただきました。
内容は「ユーザ体験を生み出す現場作り」でした。&lt;/p&gt;
&lt;p&gt;minneはモバイルに関してUI/UX部分を深津さんに引っ張っていただいているところですが、日々大変勉強になっています。
今回はそのものづくりの取り組みにどういったことをするべきで、どれだけ集中できるようにするか、そのために開発は
どういったことをしているかを開発者の立場としてお話しさせていただきました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://peatix.com/event/121467&#34;&gt;「minne」技術戦略カンファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;資料&#34;&gt;資料&lt;/h2&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;1&#34; data-id=&#34;321ea5e0b71a496e86a5471dc8a1e272&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;反省点&#34;&gt;反省点&lt;/h2&gt;
&lt;p&gt;場所が普段発表するような場所じゃないのと会場が大きかったの何か見えない大きなプレッシャーを感じて全てが裏目に回った感じがしました。。。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;極度の緊張のせいでスライドしか見てなかった。あとどこ見てしゃべったらいいかわかんなくなってパニクった&lt;/li&gt;
&lt;li&gt;ステージ往復してみたかった&lt;/li&gt;
&lt;li&gt;「え〜」言わないぞって思ったけど多くて悲しかった&lt;/li&gt;
&lt;li&gt;練習量足りない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;
&lt;p&gt;今回の発表で色々話しましたが、まだまだまだまだ改善できるところはたくさんあるので圧倒的ナンバーワンになるまで
引き続き頑張っていこうと思う日なのでした。&lt;/p&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&#34;//suzuri.jp/thirdparty/widgets.js&#34;;js.charset=&#34;utf-8&#34;;fjs.parentNode.insertBefore(js,fjs);}}(document,&#34;script&#34;,&#34;suzuri-widget-script&#34;);&lt;/script&gt;
&lt;div class=&#34;suzuri-widget-product&#34; data-suzuri-product-id=&#34;436871&#34; data-suzuri-item-variant-id=&#34;3&#34;&gt;&lt;a href=&#34;https://suzuri.jp/nakajijapan/294061/t-shirt/s/navy&#34;&gt;&lt;img src=&#34;https://d1q9av5b648rmv.cloudfront.net/v3/323x323/t-shirt/s/navy/294061/1445775617-2520x2992.png.jpg?h=9d193f04f1089d4b82d07328f6712473f824609c&#34; width=&#34;323&#34; height=&#34;323&#34;&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;気合いいれてこ。&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>potatotips (iOS/Android開発Tips共有会) 第21回に参加してきた</title>
            <link>http://nakajijapan.github.io/posts/2015/2015-09-17-potatotips-21/</link>
            <pubDate>Wed, 16 Sep 2015 23:59:00 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2015/2015-09-17-potatotips-21/</guid>
            <description>&lt;p&gt;potatotips (iOS/Android開発Tips共有会) 第21回にブログ枠として参加してきたのでそのメモになります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2015/2015-09-16-03.jpg&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2015/2015-09-16-04.jpg&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2015/2015-09-16-01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;swift-compile-time&#34;&gt;Swift compile time&lt;/h2&gt;
&lt;p&gt;@_mpon さんの発表&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5f3f2e3432c94ee0a7a2e31231a61625&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;framework-code-reading&#34;&gt;framework code reading&lt;/h2&gt;
&lt;p&gt;@kgmyshinさんの発表&lt;/p&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/Ay2qfwjelVPQx&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/shinnosukekugimiya/framework-code-reading&#34; title=&#34;Framework code reading&#34; target=&#34;_blank&#34;&gt;Framework code reading&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/shinnosukekugimiya&#34; target=&#34;_blank&#34;&gt;shinnosuke kugimiya&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;h2 id=&#34;apple-watch-tips&#34;&gt;Apple Watch Tips&lt;/h2&gt;
&lt;p&gt;@shobyさんの発表&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;f845ef2cc00846b4a47deb1aa444baab&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;to-learn-interpolator&#34;&gt;To learn Interpolator&lt;/h2&gt;
&lt;p&gt;@amyu_san さんの発表&lt;/p&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/Dr6t7rxwMEsAV4&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;
&lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/mimayuki7/to-learn-interpolator&#34; title=&#34;To learn Interpolator&#34; target=&#34;_blank&#34;&gt;To learn Interpolator&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/mimayuki7&#34; target=&#34;_blank&#34;&gt;Mima Yuki&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;h2 id=&#34;3d-touch-for-ios&#34;&gt;3D touch for iOS&lt;/h2&gt;
&lt;p&gt;@TachibanaKaoruさんの発表&lt;/p&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/4YvSUYs1kauGqL&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/toyship/3d-touch-for-ios&#34; title=&#34;3D touch for iOS&#34; target=&#34;_blank&#34;&gt;3D touch for iOS&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/toyship&#34; target=&#34;_blank&#34;&gt;toyship&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;h3 id=&#34;recently-google-play-developer-console&#34;&gt;Recently Google Play Developer Console&lt;/h3&gt;
&lt;p&gt;@tarotaro4 さんの発表&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>NKJMovieComposerをSwiftにした</title>
            <link>http://nakajijapan.github.io/posts/2015/2015-03-17-nkjmoviecomposer-swift/</link>
            <pubDate>Tue, 17 Mar 2015 13:40:00 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2015/2015-03-17-nkjmoviecomposer-swift/</guid>
            <description>&lt;p&gt;ようやくCocoapodsがSwiftに対応した(0.36になった)ので自分のプラグインもSwfitに書き換えたものを&lt;code&gt;master&lt;/code&gt;にマージしました。
Swiftは名前空間あるのでキラキラ名にするでも良かったんだけど、良い名前が思い浮かばなかったのとなんだか &lt;em&gt;NKJ&lt;/em&gt; に愛着があるので
そのままにしましたｗ&lt;/p&gt;
&lt;p&gt;基本自分のプラグインを書き換えるときはこの方針で行こう。
あと、わかりやすいように自分のプラグインのデモをのせてみました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/nakajijapan/NKJMovieComposer/raw/master/demo.gif&#34; alt=&#34;nakajijapan&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swiftに書き換えた時のレポジトリ
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nakajijapan/NKJMovieComposer/pull/1&#34;&gt;https://github.com/nakajijapan/NKJMovieComposer/pull/1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>

