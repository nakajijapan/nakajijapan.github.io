<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Tech on おじさんは生きている</title>
        <link>http://nakajijapan.github.io/categories/tech/</link>
        <description>Recent content in Tech on おじさんは生きている</description>
        <generator>Hugo -- gohugo.io</generator>
        
        <language>ja-JP</language>
        
        <copyright>nakajijapan All rights reserved.</copyright>
        
        <lastBuildDate>Tue, 25 Jun 2024 12:06:56 +0900</lastBuildDate>
        
        
        
        <atom:link href="http://nakajijapan.github.io/categories/tech/" rel="self" type="application/rss+xml" />
        
        
        <item>
            <title>Terraformで社内のインフラ環境(AWS)をコード化(IaC化)する</title>
            <link>http://nakajijapan.github.io/posts/2024/terraform-piazza/</link>
            <pubDate>Tue, 25 Jun 2024 12:06:56 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2024/terraform-piazza/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2024/06-001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;会社に入って、インフラの非効率さと管理の煩雑さに課題を感じていた。リソースや優先順位の制約があったが、改善の必要性を強く感じ、実務経験が浅い中でもTerraformを用いてIaC化に取り組むことを決意した。この取り組みを通じて得られた知見と成果を共有する。&lt;/p&gt;
&lt;h1 id=&#34;現状&#34;&gt;現状&lt;/h1&gt;
&lt;p&gt;2022年後半時点&lt;/p&gt;
&lt;p&gt;一つのAWSアカウントに、すべての環境がセットアップされている状態だった。しかし、テスト段階のものやすでに利用されていないものが点在している状況。現状、どのサービスや設定が必須かどうかを判断する人がいないため、無駄なリソースが散在している。また、ビジネスの状況的に、メンバーがこの問題の改善にコミットすることが難しく、優先順位が低いとされている。&lt;/p&gt;
&lt;p&gt;さらに、現在のプロダクトの構成は、少し過剰であったり、適切でない部分があるため、見直しが必要だった。さらには、あるミドルウェアを導入予定でもあり、検証するにも安心安全にそして迅速にできるかは不安ポイントであった。&lt;/p&gt;
&lt;h1 id=&#34;課題&#34;&gt;課題&lt;/h1&gt;
&lt;p&gt;このままにしておくと、以下の課題が発生する可能性が高まる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;時間・費用面でのコスト増加&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;調査に時間がかかる。&lt;/li&gt;
&lt;li&gt;不要なリソースを放置しているため、無駄な費用がかかる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;運用負荷の増加&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;構成が複雑化・煩雑化しているため、シンプルに分離しておく必要がある。
&lt;ul&gt;
&lt;li&gt;環境を別々にすることで解消する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;迅速な意思決定の阻害&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;アグレッシブにインフラの検証や新しい環境の構築が行えない。&lt;/li&gt;
&lt;li&gt;何を削除し、変更すればよいかが分からず、理想の環境にするのが難しい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;方針&#34;&gt;方針&lt;/h1&gt;
&lt;p&gt;何を削除し、何を残すべきか、またどれを改善すべきかを判断するためには、現状を正確に把握する必要がある。そのために、以下の手順で進める。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;まず、現在の全ての環境設定をコード化して管理できる状態にする。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;現在、すべての環境が入り混ざっているproduction環境全体を、Infrastructure as Code (IaC)として管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;次に、新しいAWSアカウントを構築し、現状のプロダクトに必要な環境だけを移行する。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;今ある環境をProductionにする&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Staging構築&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sandbox構築&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Productionにある不要な環境を削除していく。
&lt;ul&gt;
&lt;li&gt;Productionにあるstaging環境一式を削除。&lt;/li&gt;
&lt;li&gt;Productionにあるsandbox環境一式を削除。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これにより、以下の利点が得られる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各環境で不要な設定かどうかをチェックし、安心して削除が行える。&lt;/li&gt;
&lt;li&gt;万が一間違えても、terraformで簡単にリカバリーが可能。&lt;/li&gt;
&lt;li&gt;新しいサービスを導入する際も、sandboxで何度でも環境を再構築でき、安心して本番に導入できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このようにして、メンバー全員が安心・安全・正確に運用できる状況を作り上げ、最終的に開発スピードを落とすことなくプロダクトを成長させることにコミットできる。&lt;/p&gt;
&lt;p&gt;そのためにも、まずは、環境をIaC化するところから始めた。&lt;/p&gt;
&lt;h1 id=&#34;やったこと&#34;&gt;やったこと&lt;/h1&gt;
&lt;h2 id=&#34;ざっくり把握&#34;&gt;ざっくり把握&lt;/h2&gt;
&lt;p&gt;基本中の基本ではあるがそれに変わるものがなかったのである程度把握したら、どういうサービスをどのように利用しているのかをドキュメントにまとめたり、アーキテクチャ図にしたりして、徐々に深掘りできる状態にした。&lt;/p&gt;
&lt;h2 id=&#34;サポート状態を構築する&#34;&gt;サポート状態を構築する&lt;/h2&gt;
&lt;p&gt;現状のメンバーで誰も把握できていないサービスを利用していたり、設定があったし、僕も完全に運用できる知見が少ないものもあったので以下の状況を構築した&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;徹底的にAWSのテクニカルサポートの人に聞く&lt;/li&gt;
&lt;li&gt;コンサルしていただくメンバーを業務委託として迎え入れる&lt;/li&gt;
&lt;li&gt;SREチームを発足して会社のインフラを把握し開発サイドに課題を取り込めるようにしたり、経営サイドに施策実行の提案など行える状態を作る。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一括でできないかの調査&#34;&gt;一括でできないかの調査&lt;/h2&gt;
&lt;p&gt;小さい構成ながら４、５年蔑ろにしてきたところはあるのでそれなりに設定はしてある状態。
一つずつ設定をみて一個ずつimportしていくのは途方もなく時間がかかる。なるべくなら自動化できるところはしていきたい。一気にimportしていきたいところだった。&lt;/p&gt;
&lt;aside class=&#34;callout&#34;&gt;
  &lt;p class=&#34;title&#34;&gt;見つけたもの&lt;/p&gt;
  &lt;p class=&#34;content&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://sfujiwara.hatenablog.com/entry/tfstate-merge&#34;&gt;複数の Terraform state を結合する tfstate-merge を書いて20個以上の state を大統一した - 酒日記 はてな支店&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;しかし、バージョンが現状利用しているものと異なるため、断念。
tfstateのコピペができなそうだった。&lt;/p&gt;
  &lt;/p&gt;
&lt;/aside&gt;
&lt;h3 id=&#34;代替案&#34;&gt;代替案&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/terraformer&#34;&gt;https://github.com/GoogleCloudPlatform/terraformer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これを使うとしてみた。
これは指定したAWSアカウント、サービス別にコードとして一括ですべてコードにおとしこめるところ。
懸念事項としては落とし込んだ時にtfstateも合わせて作成されるしようになっているところ。
現状、リモートでtfstateを管理しているので、そちらに反映していかなければならない。
ここは何かしらの対応が必要だ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;手順&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;terraformerでコードに落とし込む&lt;/li&gt;
&lt;li&gt;落とし込まれたコードからterraformのimportブロックを作成する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terraform import&lt;/code&gt;を実行して実際に反映させる。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これでいけそうだ。&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>CTO就任して1年でやってきたこと</title>
            <link>http://nakajijapan.github.io/posts/2023/2023-12-12-cto-first-anniversaryu/</link>
            <pubDate>Tue, 12 Dec 2023 12:29:08 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2023/2023-12-12-cto-first-anniversaryu/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2022/12_004.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;時間が経つのは早いもので、この一年間は特に充実していて、多くの変化があった。CTOとして、多くの挑戦を経験し、可能性を探り、成長してきたと思う。今回は、そんな一年間経営側のポジションとしてエンジニアのポジションとしてどんなことをしてきたのかまとめようと思う。&lt;/p&gt;
&lt;h1 id=&#34;入社経緯&#34;&gt;入社経緯&lt;/h1&gt;
&lt;p&gt;詳しくは以前自分が書いたブログに書いてある。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nakajijapan.github.io/blog/2022/12/12/piazza%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BE%E3%81%AEcto%E3%81%AB%E5%B0%B1%E4%BB%BB%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/&#34;&gt;https://nakajijapan.github.io/blog/2022/12/12/piazza株式会社のctoに就任しました/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;簡単にまとめると最初に掲げたのが以下だ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エンジニアリングの最終意思決定&lt;/li&gt;
&lt;li&gt;エンジニア組織の構築&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それを基本理念として業務に関わってきた。&lt;/p&gt;
&lt;h1 id=&#34;なにをやってきたのか&#34;&gt;なにをやってきたのか&lt;/h1&gt;
&lt;p&gt;まずは、入社した会社の現状を深く理解することから始めた。全エンジニアと1対1で会うことにより、組織やエンジニアリングに関する様々な面をヒアリングし、課題を明らかにしてきた。そして、さまざまな課題に取り組む中で、気づけば1年が経過していた。その期間に自分が何をやってきたのかを一言で言うなら、 &lt;strong&gt;「状況に応じて迅速に決断を下す」&lt;/strong&gt; ということだったと思う。&lt;/p&gt;
&lt;p&gt;「状況に応じて」とは、人・もの・金によって多く変わっていく。わかりやすいところで言うと会社のフェーズに応じてもそうだ。その状況下で多くの変数がでてくるのでそれを考慮し、適切な判断を下す必要があった。そして、「迅速に」という点においては、特に現在のフェーズでは制約が多い中で、リスクをある程度受け入れつつも、スピード感を持って行動することが我々の強みだと確信している。&lt;/p&gt;
&lt;p&gt;これらのプロセスを、会社とエンジニア双方にとってWin-Winとなるよう、ドキュメントにしっかりとまとめ、Notionに残して進めてきた。加えて、情報の透明性を高めるためにも、この取り組みは重要だったと思う。チーム全員が迅速かつ効果的な意思決定を行うためには、オープンでアクセス可能な情報共有が不可欠だからだ&lt;/p&gt;
&lt;h2 id=&#34;技術選択の一部刷新&#34;&gt;技術選択の一部刷新&lt;/h2&gt;
&lt;p&gt;会社がシード期にある今、エンジニアと資金のリソースは限られている。ビジネスを優先するための選択だが、会社の現状に合わせてモバイルアプリの技術選択を見直す必要があった。&lt;/p&gt;
&lt;p&gt;前提として技術スタックだ。プロダクトはWebとMobileの両方で展開している。Mobileに関しては両プラットフォームリリースしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server Side
&lt;ul&gt;
&lt;li&gt;Rails, MySQL, Redis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mobile
&lt;ul&gt;
&lt;li&gt;iOS: Swift&lt;/li&gt;
&lt;li&gt;Android: React Native&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Infra
&lt;ul&gt;
&lt;li&gt;AWS, GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics
&lt;ul&gt;
&lt;li&gt;Big Query, adjust, Firebase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BI
&lt;ul&gt;
&lt;li&gt;metabase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まず、Androidアプリの開発で大きな変更を行った。React NativeからKotlinへの移行を決定した。これは、React Nativeに集中することが現在の状況で大きなリスクを伴うと判断したためだ。特に、アプリのデグレードや、完成度の高いiOSアプリとして既にSwiftで作成されていて、そこへの影響が懸念された。&lt;/p&gt;
&lt;p&gt;この決定の背景には、Androidアプリが細部の仕様、インタラクション、バグなどの問題を抱えていたことがある。React Nativeに一本化すればユニバーサルな設計が優先され、良い面もでてくるとは思うが、iOSアプリの使い心地が向上するとは限らない。必ず落ちる。&lt;/p&gt;
&lt;p&gt;そこで、Androidアプリの再設計を行うために専門の開発者を業務委託で迎え入れることにした。これは、正社員のみを採用していた方針からの転換だ。開発メンバーには、Android開発から離れてもらい、より優先度の高い業務に集中してもらうことにした。新しいAndroidエンジニアをフルタイムで採用し、その人に先導してもらいつつなるべく早い期間でアプリのリニューアルを完成させる計画を立てている。並行してフルコミットのAndroidエンジニアの採用も進めていく。&lt;/p&gt;
&lt;h2 id=&#34;分析基盤の構築&#34;&gt;分析基盤の構築&lt;/h2&gt;
&lt;p&gt;背景として、最近データ分析はビジネスにおいて非常に重要な要素だということは広く認識されている。しかし、現状は従来のスプレッドシートを使ったデータ管理や分析がなされており、効率的でない場合が多かった。さらに、データ分析は主にエンジニアに全ての業務降りかかっていた。&lt;/p&gt;
&lt;p&gt;弊社では、特に以下の問題が顕著になっていた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析情報をスプレッドシートの管理で行なっていた。自動更新はされているが、専門化しすぎて誰もメンテナンスできない状態になっていた。また、データがどこにあるのか不明瞭で、情報のアクセスが難しかった。&lt;/li&gt;
&lt;li&gt;データ分析の作業や共有がすぐに行えないため、ビジネス上の意思決定に影響が出ていた。&lt;/li&gt;
&lt;li&gt;エンジニアの人数が限られているため、全ての分析作業を彼らに頼るわけにはいかなかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの問題を解決するために、私たちは全社的な分析基盤を構築し、BIツールを導入することにした。この新しいシステムにより、データの管理と分析が一元化され、誰もが簡単にアクセスし、利用できるようになった。結果として、属人化した運用から脱却でき、データ駆動型の意思決定が容易になった。&lt;/p&gt;
&lt;h2 id=&#34;プロダクトチームの採用方針を策定&#34;&gt;プロダクトチームの採用方針を策定&lt;/h2&gt;
&lt;p&gt;エンジニアの採用は現状容易ではなく、優秀な人材を獲得するのは簡単ではない。真剣にプロジェクトに取り組んでも、ようやく一人の才能ある人が入社するかどうかというのが実情だ。このような状況の中でも自分はエンジニアを採用していかないといけない、自分としては結構なプレッシャーだ。今までの方針としては、基本は正社員のみの採用方針をとっていた。この辺の人材の制御をちゃんとやろうとすると開発しつつだとかなり大変なものになるので自分がそこを引き継ぎある程度集中できるような状態にさせた。少しだけだが柔軟な採用戦略を取り入れることができた。&lt;/p&gt;
&lt;p&gt;まず、フルタイム人材の長期的な募集と、状況に応じた業務委託人材の積極的な採用だ。特に、高い専門性を持つ人材を対象にする。この方針の背後には、施策を迅速に前進させるという意図がある。優秀な人材をチームに迎え、既存の社員の技術力を自然と向上させる。また、新たに入ってくる人がすぐに取り組めるよう、ドキュメントを充実させ、知識の共有を意識的に行うことで、チーム全体の生産性と効率を高めることができる。&lt;/p&gt;
&lt;p&gt;この採用方針の変更は、単に人員を増やすことだけではなく、チームのダイナミクスを活性化し、プロダクト開発の質を高めるための戦略的な選択だ。&lt;/p&gt;
&lt;h2 id=&#34;インフラの方針を策定&#34;&gt;インフラの方針を策定&lt;/h2&gt;
&lt;p&gt;今まではビジネスが最優先で、プロダクトがマーケットにどうフィットするかを仮説検証の繰り返しで探っていた。しかし、プロダクトが成長するにつれ、それだけでなく、より広範な考え方が必要になってきたのが現在のフェーズだ。インフラを担当していたエンジニアたちの退職が続き、誰も全体を把握できていない状況も重なり、新たな対応が求められていた。&lt;/p&gt;
&lt;p&gt;この状況を踏まえ、自分は、現状のリソース配分を考慮して、新しいプロジェクトを立ち上げることにした。自分がイニシアチブとって進め、現場のエンジニアが将来的に管理・運用できるようなインフラの仕組みを作るための動きを開始した。ただ、私一人だけでは限界があるため、インフラ周りで活躍している方に力を借りて、コンサルティング形式での支援を受けることにした。&lt;/p&gt;
&lt;p&gt;自分は先行して、Terraformを用いてインフラをコードとして管理する体制を整えた。これは、将来的に現場のメンバーでもインフラの管理ができるようにするための一歩だ。幸い、まだインフラの構成はそれほど複雑で難しいものにはなっていなかったので頑張り次第でまとめられるだろうという目論見だ。大変だったが、、、&lt;/p&gt;
&lt;p&gt;同時に、SREチームを発足して、プロダクトがどのようにしたら安定稼働するのか最低限の安定とはどこまでなのかという定義を言語化し、場合によっては施策よりもパフォーマンスが重要なときもあるのでその優先度が変えられるよう議論のステージに持っていけるような仕組みをもう一人のメンバーと構築している。&lt;/p&gt;
&lt;p&gt;現段階で正社員のインフラエンジニアを採用するには早すぎると判断し、業務委託を採用する方針を取った。&lt;/p&gt;
&lt;h2 id=&#34;pdmポジションの作成&#34;&gt;PdMポジションの作成&lt;/h2&gt;
&lt;p&gt;弊社では、施策が単一のビジネスサイドからのものではなく、ビジネス、アライアンス（行政周り）、コミュニティなど、複数の方面から降りてくるという特徴がある。これまでこれらの施策の優先順位を決めていたのは代表の矢野だが、事業の成長と共にその負担は増大していました。矢野の責務も多岐に渡り、優先順位の変動も頻繁にあった。しかも、どの施策も重要であるため、プロダクトチームがより積極的にロードマップの作成と優先順位の調整に関与する必要があると判断した。&lt;/p&gt;
&lt;p&gt;このような状況を受けて、PdM（プロダクトマネージャー）ポジションを新設し、その役割としては、プロダクトチームの中心となり、施策の優先順位を明確にし、チーム全体の効果的な方向性を決定する責任を担う。&lt;/p&gt;
&lt;p&gt;さらに、この新しいポジションに伴い、組織の仕組み、採用方針も再構築した。これにより、矢野は各計画に対して「Go」または「No Go!!!」の意思決定のみを行うことに集中できるようになり、より事業の戦略的な業務に専念できる仕組みを作った。さらにプロダクトチームの自律性を高め、より迅速かつ効果的な意思決定を可能にするものでもある。&lt;/p&gt;
&lt;h2 id=&#34;生成aiの周知展開&#34;&gt;生成AIの周知・展開&lt;/h2&gt;
&lt;p&gt;生成AIが世の中でもてはやされるようになって会社でも無視できない技術になってきた。この新しい技術の可能性を最大限に活用するために、私たちは全社を対象とした勉強会を開催した。この勉強会では、生成AIが現状で何ができるのか、そしてどのように業務に応用できるのかについて指南した。また、知見の共有や生成AIの活用を促進するための仕組み作りにも尽力した。&lt;/p&gt;
&lt;p&gt;そして、先行して生成AIに関する調査や研究を行っていたエンジニアをサポートしました。その結果、まだ実証実験の段階ではあるが、新しいプロダクトのリリースに成功しました。このプロダクトは、「チラデジ」と名付けられ、ローカルなAI技術の活用を試みている。&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>PIAZZA株式会社のCTOに就任しました。</title>
            <link>http://nakajijapan.github.io/posts/2022/2022-12-09-piazza-cto/</link>
            <pubDate>Mon, 12 Dec 2022 09:11:24 +0900</pubDate>
            
            <guid>http://nakajijapan.github.io/posts/2022/2022-12-09-piazza-cto/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;http://nakajijapan.github.io/images/posts/2022/12_004.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.wantedly.com/companies/piazza-hiroba/projects&#34;&gt;https://www.wantedly.com/companies/piazza-hiroba/projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;１２月１日付でPIAZZA株式会社に執行役員CTOとして入社することになりました。&lt;/p&gt;
&lt;h1 id=&#34;なぜ入社したのか&#34;&gt;なぜ入社したのか&lt;/h1&gt;
&lt;p&gt;きっかけはある問題をきっかけに退職を考え始めていたタイミングで、偶然YOUTRUST経由でお誘いのメッセージがきたことがきっかけです。
面談・面接をしていく中で求められていること、自分がしたいこと、そしてできることがうまくマッチしました。さらにボードメンバー、特に関わることになるであろうプロダクトメンバーの方ともしっかり話をして行く中で同じ価値観や一緒に（楽しく＆切磋琢磨して）仕事していける人たちと感じたのも強かったです。&lt;/p&gt;
&lt;h1 id=&#34;何がしたいのか&#34;&gt;何がしたいのか&lt;/h1&gt;
&lt;p&gt;自分はエンジニア（最近だとモバイル全般に特化）、エンジニアリングマネージャとして、開発部隊の中心で実際の開発作業やマネージメントをするにとどまっていました。次のチャンレンジを考えた時にこのまま技術を極めてアーキテクトとしても道もありましたが、自分の嗜好的に実際に自分で企画して世の中の人にどれだけ使ってくれるか、市場内でのプロダクトの成長というところに重みを置くところがあったので、自分のいままでのキャリアを考慮しつつ、これからはエンジニアという基盤は持ちつつ、経営というところからプロダクト・組織を改善していきたいという気持ちに変化してきました。&lt;/p&gt;
&lt;h1 id=&#34;何をするのか&#34;&gt;何をするのか&lt;/h1&gt;
&lt;p&gt;今回は自分はCTOとして関わることになるのですが、一般的にCTO（最高技術責任者）は以下のように定義されています。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;最高技術責任者（さいこうぎじゅつせきにんしゃ、英語: chief technical officer または chief technology officer、略語: CTO）は ビジネス幹部のポジションで、会社における技術的な役割に焦点をあてたものである。研究開発ディレクターの立場を拡張したものとして、アメリカでは1980年代に登場した。

ドットコム時代と、1990年代のコンピュータブームの際に、多くの会社が主要な技術的人物に最高技術責任者という肩書を用いた。MISとITコミュニティはしばしば最高情報責任者(CIO)の同義語として、または、複雑な技術で精通した最高情報責任者の部下として、最高技術責任者という肩書を使った。最高技術責任者の役割は企業、産業の間で様々である。しかし、大体の場合、技術に関連している。以下のような役割が含まれる。

・短期間の（戦略的な）技術的方向性決定
・研究開発のビジネス的な監督
・企業内でのソフトウェアの利用
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参照: &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%9C%80%E9%AB%98%E6%8A%80%E8%A1%93%E8%B2%AC%E4%BB%BB%E8%80%85&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;だいぶ広義でふあっとしていますが、自分としては以下の定義がしっくりきています。&lt;/p&gt;
&lt;h3 id=&#34;経営戦略の決断スピードに柔軟に対応できるよう技術部側面からからサポートしていき企業全体の収益を高める責任を持つ&#34;&gt;経営戦略の決断、スピードに柔軟に対応できるよう技術部側面からからサポートしていき、企業全体の収益を高める責任を持つ。&lt;/h3&gt;
&lt;p&gt;なので上のようなことが基本的には求められると思います。とはいえ会社の規模やフェーズによっても責任の内容は変わってくるので、
入社するにあたって、ヒアリングした時に自分が責任を負うべきところは以下の二つがある思っています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エンジニアリングの最終意思決定&lt;/li&gt;
&lt;li&gt;エンジニア組織の構築&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;エンジニアリングの最終意思決定&#34;&gt;エンジニアリングの最終意思決定&lt;/h2&gt;
&lt;p&gt;企業にどのような利益をもたらすかを技術的視点に立ち、自社の利益を最大化するために、事業・経営面を含めた視点で俯瞰して技術的判断を行う。
経営戦略において大きなマイルストーンに向かって計画的に進むこともあれば、その場その場で柔軟に進んでいく時がある。そんなときでも状況（人・もの・金）に応じた技術的決断を決める。
日々進化する技術へのキャッチアップする状況を構築し、企業が経営戦略をスピードを下げることなく実行し続けるよう、現状そして未来を踏まえ適切な技術判断を行う。&lt;/p&gt;
&lt;h2 id=&#34;エンジニア組織の構築&#34;&gt;エンジニア組織の構築&lt;/h2&gt;
&lt;p&gt;現状は一エンジニアとして動いている部分があるが、近い将来経営戦略を加速させていくために、エンジニア組織を構築して今以上に企業価値を高めていく必要がある。そのためには、以下の施策を行う必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エンジニア採用&lt;/li&gt;
&lt;li&gt;エンジニア文化の醸成&lt;/li&gt;
&lt;li&gt;エンジニアブランディングの強化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;できんの&#34;&gt;できんの？&lt;/h2&gt;
&lt;p&gt;正直な話、自分がどこまでできるか不安なところは多少なりともありますができるだけ責任を全うできるよう精一杯やっていこうと思っています。
以上、自分の所信表明でした。&lt;/p&gt;
&lt;h1 id=&#34;エンジニア採用してます&#34;&gt;エンジニア採用してます！！！！&lt;/h1&gt;
&lt;p&gt;そんな私であり弊社ですが、プロダクチームの規模を大きくするべく絶賛エンジニア募集しているのでよろしくおねがいします！！！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.green-japan.com/company/6783&#34;&gt;採用ページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.about.piazza-life.com/&#34;&gt;コーポレートサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そもそも、どんな会社かわからない人もいると思うのでこちらの動画をみるとわかりやすいと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SSGnfa5dyl0&#34;&gt;地域の人びとが交わる「PIAZZA（ひろば）」を求めて | 晃平 矢野 | TEDxNihonbashi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まずは僕のことから知りたいと思った方はこちらで話しましょう！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://meety.net/matches/UylhrVtpbVwc&#34;&gt;meety&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>

